# Kiro - Agentic IDE Documentation

## Overview
Kiro is an agentic IDE (Integrated Development Environment) that helps developers do their best work through AI-assisted development. It focuses on spec-driven development, transforming high-level ideas into structured implementations from prototype to production.

## Core Features

### 1. Specs (Specification-Driven Development)
- **Purpose**: Formalize development process for complex features
- **Workflow**: Three-phase approach:
  1. Requirements: Break down ideas into user stories with acceptance criteria
  2. Design: Create documentation with sequence diagrams
  3. Implementation: Track progress across discrete tasks
- **Benefits**: Helps implement complex features on larger codebases in fewer iterations
- **Access**: Click "+" button under Specs section

### 2. Agentic Chat
- **Purpose**: Build features through natural conversation with AI
- **Access**: `Cmd+L` (Mac) or `Ctrl+L` (Windows/Linux)
- **Capabilities**: 
  - Contextual understanding of entire codebase
  - Smart intent detection (information vs action)
  - Session types: "vibe" or "spec" sessions
- **Context Providers**:
  - `#codebase`: Find relevant project files
  - `#file`: Reference specific files
  - `#terminal`: Include terminal output
  - `#git diff`: Reference current Git changes
- **Integration**: Works with Claude Sonnet 3.7 and 4 AI models

### 3. Hooks (Agent Hooks)
- **Purpose**: Automate repetitive tasks with intelligent triggers
- **Event Detection**: Monitor IDE events (save, create, delete files)
- **Workflow**: Event Detection → Prompt Execution → Automated Action
- **Setup Methods**:
  - Explorer View: Navigate to "Agent Hooks" section, click "+"
  - Command Palette: `Cmd+Shift+P` / `Ctrl+Shift+P` → "Kiro: Open Kiro Hook UI"
- **Benefits**: Maintains consistent code quality, reduces manual overhead, standardizes team processes
- **Automation**: Can generate documentation, unit tests, and code optimizations

### 4. Steering
- **Purpose**: Guide AI with custom rules and project-specific context
- **Storage**: Markdown files in `.kiro/steering/` directory
- **Default Files**:
  - `product.md`: Product overview and objectives
  - `tech.md`: Technology stack and constraints  
  - `structure.md`: File organization and architectural decisions
- **Inclusion Modes**:
  - Always Included (default): Core standards applied to all interactions
  - Conditional Inclusion: Context loaded for specific file types
  - Manual Inclusion: Context added on-demand via `#filename`
- **Best Practices**: Keep files focused, use clear filenames, provide examples, never include sensitive info

### 5. MCP Servers
- **Purpose**: Connect external tools and data sources
- **Integration**: Extends IDE capabilities through external connections

## Technical Specifications

### Language Support
- Python
- Java
- JavaScript
- TypeScript
- And other major programming languages

### IDE Integration
- VS Code extensions and settings compatibility
- Multimodal input support (including image-based design guidance)
- Enterprise-grade security and privacy features

### Target Audience
- Software engineers working on complex codebases
- Developers learning new tech stacks
- Open-source developers
- Engineers seeking to streamline development workflow

## Key Benefits
- Reduces repetitive coding tasks
- Provides structured approach to AI-assisted development
- Lowers barrier to entry for coding
- Facilitates collaboration between product and engineering teams
- Transforms prompts into clear requirements, system design, and implementation tasks

## Current Status
- **Public Preview**: Free during preview period
- **Language**: Currently optimized for English, with multilingual support planned
- **Documentation**: Available at https://kiro.dev/docs/
- **Feedback**: Submit feedback via GitHub issues

## Getting Started
1. **Download & Install**: Get Kiro running on your machine
2. **First Project**: Learn about Kiro's features through hands-on project
3. **Interactive Tutorial**: Build a real project while learning through game-based tutorial

## Documentation Structure

### **Main Documentation Root**
- **Main Documentation**: https://kiro.dev/docs/ - Complete documentation portal

### **Getting Started**
- **Getting Started**: https://kiro.dev/docs/getting-started/ - Getting started overview
- **Installation**: https://kiro.dev/docs/getting-started/installation/ - Installation instructions
- **First Project**: https://kiro.dev/docs/getting-started/first-project/ - Your first project guide

### **Core Features**

#### **Specs**
- **Specs Overview**: https://kiro.dev/docs/specs/ - Technical specifications and workflow
- **Specs Concepts**: https://kiro.dev/docs/specs/concepts/ - Learn about the three-phase workflow
- **Specs Best Practices**: https://kiro.dev/docs/specs/best-practices/ - FAQs on best practices when working with specs

#### **Chat (Agentic Chat)**
- **Chat Overview**: https://kiro.dev/docs/chat/ - Agentic chat functionality and context providers
- **Autopilot**: https://kiro.dev/docs/chat/autopilot/ - Autopilot features
- **Vibe Sessions**: https://kiro.dev/docs/chat/vibe/ - Vibe vs. Spec sessions
- **Terminal**: https://kiro.dev/docs/chat/terminal/ - Terminal interface

#### **Hooks (Agent Hooks)**
- **Hooks Overview**: https://kiro.dev/docs/hooks/ - Agent hooks system and automation
- **Hook Types**: https://kiro.dev/docs/hooks/types/ - Different trigger types
- **Hook Management**: https://kiro.dev/docs/hooks/management/ - Hook management
- **Hook Best Practices**: https://kiro.dev/docs/hooks/best-practices/ - Patterns for effective hook design
- **Hook Examples**: https://kiro.dev/docs/hooks/examples/ - Hook examples
- **Hook Troubleshooting**: https://kiro.dev/docs/hooks/troubleshooting/ - Hook troubleshooting

#### **Steering**
- **Steering Overview**: https://kiro.dev/docs/steering/ - AI guidance and project-specific context

#### **MCP Servers**
- **MCP Overview**: https://kiro.dev/docs/mcp/ - MCP overview
- **MCP Configuration**: https://kiro.dev/docs/mcp/configuration/ - Configuring MCP servers
- **MCP Servers**: https://kiro.dev/docs/mcp/servers/ - MCP server management
- **MCP Usage**: https://kiro.dev/docs/mcp/usage/ - Using MCP tools
- **MCP Security**: https://kiro.dev/docs/mcp/security/ - MCP security best practices

### **Editor**
- **Interface**: https://kiro.dev/docs/editor/interface/ - Interface overview
- **Keyboard Shortcuts**: https://kiro.dev/docs/editor/keyboard-shortcuts/ - Keyboard shortcuts
- **Codebase Indexing**: https://kiro.dev/docs/editor/codebase-indexing/ - Codebase indexing

### **Reference**
- **Troubleshooting**: https://kiro.dev/docs/reference/troubleshooting/ - Troubleshooting guide
- **Auth Methods**: https://kiro.dev/docs/reference/auth-methods/ - Authentication methods
- **Privacy & Security**: https://kiro.dev/docs/reference/privacy-and-security/ - Privacy and security

### **Guides**
- **Learn by Playing**: https://kiro.dev/docs/guides/learn-by-playing/ - Build a real game project while learning Kiro
- **Languages & Frameworks**: https://kiro.dev/docs/guides/languages-and-frameworks/ - Framework-specific guides for React, Python, Go, and more
- **Migrating from VS Code**: https://kiro.dev/docs/guides/migrating-from-vscode/ - Seamlessly transition from VS Code to Kiro

### **Additional Resources**
- **FAQ**: https://kiro.dev/faq - Frequently asked questions
- **Blog**: https://kiro.dev/blog - Blog posts
- **About**: https://kiro.dev/about - About page
- **Pricing**: https://kiro.dev/pricing - Pricing information
- **Changelog**: https://kiro.dev/changelog - Change log
- **Downloads**: https://kiro.dev/downloads - Download page

## Development Philosophy
Kiro emphasizes:
- Systematic transformation of high-level ideas into detailed plans
- Clear tracking and accountability mechanisms
- Structured artifact approach to development
- AI-assisted but developer-controlled workflow

---

*Note: Kiro is currently in public preview, so features and documentation may change.*